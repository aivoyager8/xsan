cmake_minimum_required(VERSION 3.16)
project(xsan VERSION 1.0.0 LANGoption(BUILD_UTILS "Build utilities module" ON)
option(BUILD_COMMON "Build common module" ON)
option(BUILD_NETWORK "Build network module" OFF)
option(BUILD_STORAGE "Build storage module" OFF)
option(BUILD_CLUSTER "Build cluster module" OFF)
option(BUILD_REPLICATION "Build replication module" OFF)
option(BUILD_POLICY "Build policy module" OFF)
option(BUILD_VIRTUALIZATION "Build virtualization module" OFF)
option(BUILD_TESTS "Build tests" ON)
option(BUILD_TOOLS "Build command line tools" OFF)# 设置 C 标准
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

# 编译选项
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wno-unused-parameter")
set(CMAKE_C_FLAGS_DEBUG "-g -O0 -DDEBUG")
set(CMAKE_C_FLAGS_RELEASE "-O2 -DNDEBUG")

# 全局包含目录
include_directories(include)
include_directories(src/include)

# 查找依赖库
find_package(PkgConfig REQUIRED)

# libvirt (可选，用于虚拟化功能)
pkg_check_modules(LIBVIRT libvirt)
if(LIBVIRT_FOUND)
    message(STATUS "libvirt found: ${LIBVIRT_VERSION}")
    add_definitions(-DHAVE_LIBVIRT)
else()
    message(WARNING "libvirt not found - virtualization features will be disabled")
endif()

# LevelDB (可选，用于元数据存储)
find_library(LEVELDB_LIB leveldb)
if(LEVELDB_LIB)
    message(STATUS "LevelDB found: ${LEVELDB_LIB}")
    add_definitions(-DHAVE_LEVELDB)
else()
    message(WARNING "LevelDB not found - will use file-based metadata storage")
endif()

# JSON-C (可选，用于配置和API)
pkg_check_modules(JSON_C json-c)
if(JSON_C_FOUND)
    message(STATUS "JSON-C found: ${JSON_C_VERSION}")
    add_definitions(-DHAVE_JSON_C)
else()
    message(WARNING "JSON-C not found - JSON support will be limited")
endif()

# UUID (可选，用于生成唯一标识符)
find_library(UUID_LIB uuid)
if(UUID_LIB)
    message(STATUS "UUID library found: ${UUID_LIB}")
    add_definitions(-DHAVE_UUID)
else()
    message(WARNING "UUID library not found - will use alternative UUID generation")
endif()

# Protobuf-C (可选，用于网络通信)
pkg_check_modules(PROTOBUF_C libprotobuf-c)
if(PROTOBUF_C_FOUND)
    message(STATUS "Protobuf-C found: ${PROTOBUF_C_VERSION}")
    add_definitions(-DHAVE_PROTOBUF_C)
else()
    message(WARNING "Protobuf-C not found - will use simple binary protocol")
endif()

# 线程库
find_package(Threads REQUIRED)

# 定义模块构建选项
option(BUILD_UTILS "Build utils module" ON)
option(BUILD_COMMON "Build common module" ON)
option(BUILD_NETWORK "Build network module" ON)
option(BUILD_STORAGE "Build storage module" ON)
option(BUILD_CLUSTER "Build cluster module" ON)
option(BUILD_REPLICATION "Build replication module" ON)
option(BUILD_POLICY "Build policy module" ON)
option(BUILD_VIRTUALIZATION "Build virtualization module" ON)
option(BUILD_TESTS "Build tests" ON)
option(BUILD_TOOLS "Build command line tools" ON)

# 模块化构建 - 按依赖顺序构建各模块
if(BUILD_UTILS)
    add_subdirectory(src/utils)
endif()

if(BUILD_COMMON)
    add_subdirectory(src/common)
endif()

if(BUILD_NETWORK)
    add_subdirectory(src/network)
endif()

if(BUILD_STORAGE)
    add_subdirectory(src/storage)
endif()

if(BUILD_CLUSTER)
    add_subdirectory(src/cluster)
endif()

if(BUILD_REPLICATION)
    add_subdirectory(src/replication)
endif()

if(BUILD_POLICY)
    add_subdirectory(src/policy)
endif()

if(BUILD_VIRTUALIZATION)
    add_subdirectory(src/virtualization)
endif()

# 主程序构建
add_subdirectory(src/main)

# 测试构建
if(BUILD_TESTS)
    add_subdirectory(tests)
endif()

# 工具构建
if(BUILD_TOOLS)
    add_subdirectory(tools)
endif()

# 开发工具支持

# 安装头文件
install(DIRECTORY include/ DESTINATION include/xsan)
install(DIRECTORY src/include/ DESTINATION include/xsan/internal)

# 文档生成 (需要 Doxygen)
find_package(Doxygen)
if(DOXYGEN_FOUND)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in 
                   ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    
    add_custom_target(docs
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
endif()

# 代码格式化 (需要 clang-format)
find_program(CLANG_FORMAT_PATH clang-format)
if(CLANG_FORMAT_PATH)
    file(GLOB_RECURSE ALL_SOURCE_FILES 
        ${CMAKE_SOURCE_DIR}/src/*.c
        ${CMAKE_SOURCE_DIR}/src/*.h
        ${CMAKE_SOURCE_DIR}/include/*.h
        ${CMAKE_SOURCE_DIR}/tests/*.c
        ${CMAKE_SOURCE_DIR}/tools/*.c
    )
    
    add_custom_target(format
        COMMAND ${CLANG_FORMAT_PATH} -i ${ALL_SOURCE_FILES}
        COMMENT "Formatting source code with clang-format"
    )
endif()

# 静态分析 (需要 cppcheck)
find_program(CPPCHECK_PATH cppcheck)
if(CPPCHECK_PATH)
    add_custom_target(analysis
        COMMAND ${CPPCHECK_PATH}
            --enable=all
            --std=c99
            --verbose
            --quiet
            --error-exitcode=1
            ${CMAKE_SOURCE_DIR}/src
        COMMENT "Running static analysis with cppcheck"
    )
endif()

# 快速构建目标 (只构建必要组件)
add_custom_target(quick
    DEPENDS xsan-node xsan-cli
    COMMENT "Quick build - only essential components"
)

# 开发构建目标 (包含测试和调试工具)
add_custom_target(dev
    DEPENDS xsan-node xsan-cli xsan-debug xsan_unit_tests
    COMMENT "Development build - with tests and debug tools"
)

# 打印配置信息
message(STATUS "")
message(STATUS "=== XSAN Configuration ===")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C Compiler: ${CMAKE_C_COMPILER}")
message(STATUS "C Flags: ${CMAKE_C_FLAGS}")
message(STATUS "")
message(STATUS "=== Module Configuration ===")
message(STATUS "BUILD_UTILS: ${BUILD_UTILS}")
message(STATUS "BUILD_COMMON: ${BUILD_COMMON}")
message(STATUS "BUILD_NETWORK: ${BUILD_NETWORK}")
message(STATUS "BUILD_STORAGE: ${BUILD_STORAGE}")
message(STATUS "BUILD_CLUSTER: ${BUILD_CLUSTER}")
message(STATUS "BUILD_REPLICATION: ${BUILD_REPLICATION}")
message(STATUS "BUILD_POLICY: ${BUILD_POLICY}")
message(STATUS "BUILD_VIRTUALIZATION: ${BUILD_VIRTUALIZATION}")
message(STATUS "BUILD_TESTS: ${BUILD_TESTS}")
message(STATUS "BUILD_TOOLS: ${BUILD_TOOLS}")
message(STATUS "")
message(STATUS "=== Dependencies ===")
message(STATUS "libvirt: ${LIBVIRT_LIBRARIES}")
message(STATUS "LevelDB: ${LEVELDB_LIB}")
message(STATUS "JSON-C: ${JSON_C_LIBRARIES}")
message(STATUS "UUID: ${UUID_LIB}")
message(STATUS "Protobuf-C: ${PROTOBUF_C_LIBRARIES}")
message(STATUS "")
message(STATUS "=== Development Tools ===")
message(STATUS "CUnit: ${CUNIT_LIB}")
message(STATUS "Valgrind: ${VALGRIND_PATH}")
message(STATUS "Doxygen: ${DOXYGEN_FOUND}")
message(STATUS "clang-format: ${CLANG_FORMAT_PATH}")
message(STATUS "cppcheck: ${CPPCHECK_PATH}")
message(STATUS "")
message(STATUS "=== Build Targets ===")
message(STATUS "make quick    - Build essential components only")
message(STATUS "make dev      - Build with tests and debug tools")
message(STATUS "make all      - Build everything")
message(STATUS "make test     - Run all tests")
message(STATUS "make format   - Format source code")
message(STATUS "make analysis - Run static analysis")
message(STATUS "make docs     - Generate documentation")
message(STATUS "make memcheck - Run memory checks")
message(STATUS "make coverage - Generate coverage report")
message(STATUS "===========================")
